from collections import deque
from math import sqrt

class Graph:
    def __init__(self, maze):
        self.maze = maze
        self.rows = len(maze)
        self.cols = len(maze[0])
        self.nodes = set()
        self.adjacency_list = {}
        self.calculate_nodes_and_edges()

    def calculate_nodes_and_edges(self):
        def get_neighbors(node):
            i, j = node
            neighbors = []
            for x, y in [(i+1, j), (i-1,j), (i,j+1), (i,j-1), (i+1,j+1), (i-1,j+1), (i+1,j-1), (i-1,j-1)]:
                if x < 0 or x >= self.rows or y < 0 or y >= self.cols:
                    continue
                if self.maze[x][y] == 0:
                    neighbors.append((x, y))
            return neighbors
        
        for i in range(self.rows):
            for j in range(self.cols):
                if self.maze[i][j] == 0:
                    current_node = (i, j)
                    self.nodes.add(current_node)
                    self.adjacency_list[current_node] = set(get_neighbors(current_node))

    def a_star_shortest_path(self, start_node, end_node):
        def heuristic(node, end_node):
            return sqrt((node[0] - end_node[0]) ** 2 + (node[1] - end_node[1]) ** 2)

        open_set = deque([start_node])
        came_from = {}
        g_score = {node: float('inf') for node in self.nodes}
        g_score[start_node] = 0
        f_score = {node: float('inf') for node in self.nodes}
        f_score[start_node] = heuristic(start_node, end_node)

        while open_set:
            current_node = min(open_set, key=lambda x: f_score[x])
            if current_node == end_node:
                path = []
                while current_node in came_from:
                    path.append(current_node)
                    current_node = came_from[current_node]
                path.append(start_node)
                return list(reversed(path)), g_score[end_node]
            open_set.remove(current_node)
            for neighbor in self.adjacency_list[current_node]:
                tentative_g_score = g_score[current_node] + 1
                if tentative_g_score < g_score[neighbor]:
                    came_from[neighbor] = current_node
                    g_score[neighbor] = tentative_g_score
                    f_score[neighbor] = tentative_g_score + heuristic(neighbor, end_node)
                    if neighbor not in open_set:
                        open_set.append(neighbor)
        return None
