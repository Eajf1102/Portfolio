from collections import deque
from math import sqrt

class Graph: 
    def __init__(self, maze):
        self.nodes = []
        self.adjacency_list = {}

        #iterate through matrix
        for i in range(len(maze)):
            for j in range(len(maze[i])):
              # if the value at the location equals 0 set equal to coordinate
                if maze[i][j] == 0:
                    node = (i, j)
                    self.nodes.append(node)
                    self.adjacency_list[node] = []

                    for x in [-1, 0, 1]:
                        for y in [-1, 0, 1]:
                            if x == 0 and y == 0:
                                continue
                            if i + x < 0 or i + x >= len(maze) or j + y < 0 or j + y >= len(maze[i]):
                                continue
                            if maze[i + x][j + y] == 0:
                                self.adjacency_list[node].append(((i + x, j + y), 1))

    def _heuristic(self, node, end_node):
        return sqrt((node[0] - end_node[0]) ** 2 + (node[1] - end_node[1]) ** 2)

    def a_star_shortest_path(self, start_node, end_node):
        queue = deque()
        queue.append((start_node, 0))
        visited = set()
        parent = {}
        g_score = {start_node: 0}
        f_score = {start_node: self._heuristic(start_node, end_node)}

        while queue:
            node, cost = queue.popleft()
            if node == end_node:
                path = [end_node]
                while path[-1] != start_node:
                    path.append(parent[path[-1]])
                path.reverse()
                return path, g_score[end_node]

            visited.add(node)
            for neighbor, neighbor_cost in self.adjacency_list[node]:
                if neighbor in visited:
                    continue
                tentative_g_score = g_score[node] + neighbor_cost
                if neighbor not in g_score or tentative_g_score < g_score[neighbor]:
                    parent[neighbor] = node
                    g_score[neighbor] = tentative_g_score
                    f_score[neighbor] = tentative_g_score + self._heuristic(neighbor, end_node)
                    if neighbor not in [n for n, c in queue]:
                        queue.append((neighbor, tentative_g_score))

        return [], float('inf')
